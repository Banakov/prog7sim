3.1 Веб-приложение на Flask

from flask import Flask, render_template, request, redirect
from flask_sqlalchemy import SQLAlchemy

app = Flask(name)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///data.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        name = request.form['name']
        new_user = User(name=name)
        db.session.add(new_user)
        db.session.commit()
        return redirect('/')
    users = User.query.all()
    return render_template('index.html', users=users)

if name == 'main':
    db.create_all()  # Создание базы данных
    app.run(debug=True)

index.html (шаблон для формы):

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flask App</title>
</head>
<body>
    <h1>Введите имя</h1>
    <form method="POST">
        <input type="text" name="name" required>
        <button type="submit">Сохранить</button>
    </form>
    <h2>Сохраненные имена:</h2>
    <ul>
        {% for user in users %}
            <li>{{ user.name }}</li>
        {% endfor %}

</ul>
</body>
</html>


3.2 Чат с использованием Tornado и сокетов

import tornado.ioloop
import tornado.web
import tornado.websocket
import json

clients = []

class

MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.render("
